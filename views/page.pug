extends pagelayout
mixin paragraphs(set)
	for par in set
		p.text-justify #{par}
mixin paragraphsEscaped(set)
	for par in set
		p.text-justify
			!= par

mixin arg(premises, conclusion)
	.arg.text-justify
		-var i = 1
		for premise in premises
			p $P_{#{i}}$ &nbsp; #{premise}
			- i = 1 + 1
		hr
		p $\therefore$ &nbsp; #{conclusion}

mixin symbolkey(key, symbol)
	.arg.text-justify
		for k in key
			p #{k[0]}: #{k[1]}





mixin MC(x)
	h4.text-xs-center.m-y-2 #{x.title}
	nav.navbar-light.navbar.navbar-full.p-x-1#logicizeNav.subNav.m-b-2
		ul.nav.navbar-nav
			li.nav-item
				span.navbar-text.text-muted.hidden-md-down Instruction: #{x.instruction}
			li.nav-item.pull-xs-right
				button.nav-link.p-y-0.showAnswerButt.btn-blue.invisible Show Answer
			li.nav-item.pull-xs-right
				button.nav-link.p-y-0.nextButt.btn-blue(data = "intro") Next
			li.nav-item.pull-xs-right
				if (!currentUser)
					span.red Note: not currently logged in!
				else
					span.problemNumDisplay

mixin genericActivity(x)
	h4.text-xs-center.m-y-2 #{x.title}
	nav.navbar-light.navbar.navbar-full.p-x-1#logicizeNav.subNav.m-b-2
		ul.nav.navbar-nav
			li.nav-item
				span.navbar-text.text-muted.hidden-md-down Instruction: #{x.instruction}
				if (!currentUser)
					span.red Note: not currently logged in!
				span.problemNumDisplay


mixin quote(lines,source)
	blockquote.blockquote.m-t-1
		for line in lines
			p.m-y-0 #{line}
		footer.blockquote-footer #{source.name},
			cite #{source.title}
block extrahead


mixin genericButtonBar(eventId)
	button(type = "button" id = eventId+"Butt" data=eventId).btn.btn-greyish.btn-block &rarr;

block content
	- var plugin
			main.container.p-x-2.page
				case chapterNum
					when "sectionconcepts"
					when "sectionquiz"
					default
						.lessonSectionTitle
							h1 #{moduleNum}.#{chapterNum}
							hr
							h1  #{content[chapterNum]["1"].chapterName}
						p #{content[chapterNum]["1"].chapterDescription}
						- var sec = 1
						for section in content[chapterNum]
							.lessonSubTitle(id = section.title)
								h4 &sect; #{sec} #{section.title}
								hr
								- sec = sec + 1
								if section.quote
									+quote(section.quote.lines, section.quote.source)
							for x in section.content
								case x.type
									when "smallTitle"
										h4 #{x.substance}
									when "p"
										+paragraphs(x.substance)
									when "ps"
										+paragraphsEscaped(x.substance)
									when "important"
										.important.text-justify.p-a-1
											+paragraphsEscaped(x.substance)
									when "textInput"
										.important.text-xs-center.p-a-1(id = x.eventId).textInput
											for par in x.substance
												p #{par}
											textarea.m-y-1(id = x.eventId+"textArea" rows="4" cols="50")
											+genericButtonBar(x.eventId)
									when "half"
										.card-group(id = x.id).p-a-0.half
											for col in x.substance
												.card(style = "border : 0px;")
													case col.type
														when "p"
																+paragraphsEscaped(col.substance)
									when "scroll"
										.container.scroll.p-a-0.m-x-0(id = x.eventId)
											.col-sm-5.text.p-a-0.m-x-0
												for t in x.substance
													.slide
														.slidebox
															h4.slideTitle.text-xs-center #{t[1]}
															p.text-justify.p-a-1(id = t[0]) #{t[2]}
											.col-sm-6.animation.p-a-0.m-x-0
									when "arg"
											.flexContainer
												+arg(x.premises, x.conclusion)
									when "orderedList"
										for line in x.substance
											p(id = "item"+line.id).orderedList (#{line.id}) &nbsp; #{line.item}
									when "symbolkey"
											.flexContainer
												+symbolkey(x.key, x.symbol)
									when "event"
										if x.important
											.important.text-xs-center.p-a-1
												h4.text-xs-center.m-y-2 #{x.title}
												if x.substance
													+paragraphsEscaped(x.substance)
												div(id = x.eventId).container
										else
											h4.text-xs-center.m-y-2 #{x.title}
											if x.substance
												+paragraphsEscaped(x.substance)
											div(id = x.eventId).container
									when "table"
										.tableContainer(id = x.eventId)
									when "basicVenn"
											.row(id = x.eventId class = x.class).m-y-3.wholeMC
												h4.text-xs-center.m-y-2 #{x.title}
												nav.navbar-light.navbar.navbar-full.p-x-1#logicizeNav.subNav.m-b-2
													ul.nav.navbar-nav
														li.nav-item
															span.navbar-text.text-muted.hidden-md-down Instruction: #{x.instruction}
														li.nav-item.pull-xs-right
															button.nav-link.p-y-0.confirmButt.btn-blue Confirm
														li.nav-item.pull-xs-right
															button.nav-link.p-y-0.nextButt.btn-blue Next
														li.nav-item.pull-xs-right
															if (!currentUser)
																span.red Note: not currently logged in!
															else
																span.problemNumDisplay
												.readingExQ.text-xs-center.col-lg-6
												.readingExQ2.text-xs-center.col-lg-6
												.readingExAns.col-lg-12
									when "mc"
										.p-a-0.m-r-0.m-l-0
											.readingEx.m-l-2.m-b-2(id = x.eventId)
												+MC(x)
												.readingExQ.p-a-3
												.quizIntro
													+paragraphs(x.intro)
												.readingExAns
									when "matching"
											.p-a-0.m-r-0.m-l-0.m-t-3
												.m-l-2.m-b-2.readingEx.dragMatch(id = x.eventId)
													+genericActivity(x)
													.card.dropzone.text-xs-center
														p.dragQ
													.card.text-xs-center#flyzone
									when "category"
											.p-a-0.m-r-0.m-l-0
												.m-l-2.m-b-2.readingEx.categoryMatch(id = x.eventId)
													+genericActivity(x)
													.dropdowns
														h3.text-xs-center.text-muted.m-a-3 Press 'Confirm' to begin
													button(type = "button").btn.btn-greyish.m-y-3.btn-block#catConfirm Confirm
			.modal.fade.result
				.modal-dialog.modal-dialog
					.modal-content
						.modal-header
							h4.modal-title
						.modal-body
						.modal-footer



block extrafooter
	link(rel="stylesheet", type="text/css", href="/css/page.css")
	script(type="text/x-mathjax-config").
		MathJax.Hub.Config({
		tex2jax: {
			inlineMath: [ ['$','$'], ['\\(','\\)'] ]
		}}
		);
	script(type="text/javascript"  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML")
	script(src="https://d3js.org/d3.v4.min.js")
	script(src="https://d3js.org/d3-scale-chromatic.v1.min.js")
	script(src="/javascripts/mods/notify.js")
	script(src="/javascripts/mods/underscore-min.js")
	script(src="/javascripts/mods/interact.min.js")
	script(src="/javascripts/mods/help.js")
	script(src="/javascripts/chapters/"+fileName+".js")
