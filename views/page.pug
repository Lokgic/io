extends pagelayout
mixin paragraphs(set)
	for par in set
		p.text-justify #{par}
mixin paragraphsEscaped(set)
	for par in set
		p.text-justify
			!= par
mixin argument(premises, conclusion)
	.argument.m-x-3.m-y-1.text-justify
		for premise in premises
			p #{premise}
		hr
		p #{conclusion}


mixin quote(lines,source)
	blockquote.blockquote.m-t-1
		for line in lines
			p.m-y-0 #{line}
		footer.blockquote-footer #{source.name},
			cite #{source.title}
block extrahead
	link(href="https://fonts.googleapis.com/css?family=Abril+Fatface|Titillium+Web:400" rel="stylesheet")

block content
	- var plugin
			main.container.p-x-2.page
				case sectionNum
					when "sectionconcepts"
					when "sectionquiz"
					default
						.lessonSectionTitle
							h1 #{moduleNum}.#{sectionNum}
							hr
							h1  #{content[sectionNum]["1"].sectionname}
						p #{content[sectionNum]["1"].sectionDescription}
						- var sec = 1
						for section in content[sectionNum]
							.lessonSubTitle(id = section.title)
								h4 &sect; #{sec} #{section.title}
								hr
								- sec = sec + 1
								if section.quote
									+quote(section.quote.lines, section.quote.source)
							for x in section.content
								case x.type
									when "p"
										+paragraphs(x.substance)
									when "ps"
										+paragraphsEscaped(x.substance)
									when "half"
										.card-group(id = x.id).p-a-0.half
											for col in x.substance
												.card(style = "border : 0px;")
													case col.type
														when "p"
																+paragraphs(col.substance)
														when "argument"
																+argument(col.premises, col.conclusion)
									when "scroll"
										.container.scroll.p-a-0.m-x-0(id = x.eventId style="margin-bottom:300px;")
											- var first = true
											.col-sm-6.text.p-a-0
												for t in x.substance
													p.scrollText.text-justify.p-a-1(id = t[0] style = "margin-top:250px") #{t[1]}


											.col-sm-6.animation.p-a-0
									when "logicize"
										.container-fluid.panels
											.row(id = x.eventId).text-xs-center
												#userInput.leftPanel.col-md-2
													button(type = "button").btn.btn-outline-teal.m-y-1.m-r-2#exBut Object 1
													button(type = "button").btn.btn-outline-blue.m-y-1.m-r-2#exBut2 Object 2
													button(type = "button").invisible.btn.btn-purple.m-y-1.text-xs-center#delObj Delete Current Object
													p.m-y-0
														span.m-x-1#scoretitle Current Score :
														span#score 0
												#vennLog.midpanel.col-md-8
												.rightPanel.col-md-2
													p.logInstruction.text-xs-center Instruction: Determine if the following syllogism is valid, and provide the correct Venn diagram.
													.m-y-1.text-xs-center#sylProblem
													button(type = "button").btn.btn-greyish.m-y-1.btn-block#answer.answerButt Submit Answer
									when "argument"
											+argument(x.premises, x.conclusion)
									when "event"
									when "readingEx"
										p.text-xs-center.lead #{x.title}
										if x.type == "readingEx"
											div(id = x.eventId).readingEx.m-a-0
												p.text-xs-center.p-t-3 Instruction: #{x.instruction}
												.row.m-x-0
													.readingExQNum.col-md-2
													.readingExQ.col-md-10.p-a-1
												.readingExAns
												button(type = "button").btn.btn-greyish.m-y-1.btn-block.answerButt Submit Answer

										else
											div(id = x.eventId).container



block extrafooter
	link(rel="stylesheet", type="text/css", href="../css/page.css")
	script(type="text/x-mathjax-config").
		MathJax.Hub.Config({
		tex2jax: {
			inlineMath: [ ['$','$'], ['\\(','\\)'] ]
		}}
		);
	script(type="text/javascript"  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML")
	script(src="https://d3js.org/d3.v4.min.js")
	script(src="https://d3js.org/d3-scale-chromatic.v1.min.js")
	script(src="../javascripts/mods/notify.js")
	script(src="../javascripts/vennD.js")
	script(src="../javascripts/autohidenav.js")
