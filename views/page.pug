extends pagelayout
mixin paragraphs(set)
	for par in set
		p.text-justify #{par}
mixin paragraphsEscaped(set)
	for par in set
		p.text-justify
			!= par
mixin argument(premises, conclusion)
	.argument.m-x-3.m-y-1.text-justify
		for premise in premises
			p #{premise}
		hr
		p #{conclusion}

mixin MC(x)
	h4.text-xs-center.m-y-2 #{x.title}
	nav.navbar-light.navbar.navbar-full.p-x-0#logicizeNav.subNav.m-b-2
		ul.nav.navbar-nav
			li.nav-item
				span.navbar-text.text-muted.hidden-md-down Instruction: #{x.instruction}
			li.nav-item.pull-xs-right
				button.nav-link.p-y-0.confirmButt.btn-blue Confirm
			li.nav-item.pull-xs-right
				button.nav-link.p-y-0.nextButt.btn-blue Next
			li.nav-item.pull-xs-right
				if (!currentUser)
					span.red Note: not currently logged in!
				else
					span.problemNumDisplay

mixin drag(x)
	h4.text-xs-center.m-y-2 #{x.title}
	nav.navbar-light.navbar.navbar-full.p-x-0#logicizeNav.subNav.m-b-2
		ul.nav.navbar-nav
			li.nav-item
				span.navbar-text.text-muted.hidden-md-down Instruction: #{x.instruction}
				if (!currentUser)
					span.red Note: not currently logged in!
				span.problemNumDisplay


mixin quote(lines,source)
	blockquote.blockquote.m-t-1
		for line in lines
			p.m-y-0 #{line}
		footer.blockquote-footer #{source.name},
			cite #{source.title}
block extrahead


block content
	- var plugin
			main.container.p-x-2.page
				case sectionNum
					when "sectionconcepts"
					when "sectionquiz"
					default
						.lessonSectionTitle
							h1 #{moduleNum}.#{sectionNum}
							hr
							h1  #{content[sectionNum]["1"].sectionname}
						p #{content[sectionNum]["1"].sectionDescription}
						- var sec = 1
						for section in content[sectionNum]
							.lessonSubTitle(id = section.title)
								h4 &sect; #{sec} #{section.title}
								hr
								- sec = sec + 1
								if section.quote
									+quote(section.quote.lines, section.quote.source)
							for x in section.content
								case x.type
									when "p"
										+paragraphs(x.substance)
									when "ps"
										+paragraphsEscaped(x.substance)
									when "half"
										.card-group(id = x.id).p-a-0.half
											for col in x.substance
												.card(style = "border : 0px;")
													case col.type
														when "p"
																+paragraphsEscaped(col.substance)
														when "argument"
																+argument(col.premises, col.conclusion)
									when "scroll"
										.container.scroll.p-a-0.m-x-0(id = x.eventId)
											.col-sm-5.text.p-a-0.m-x-0
												for t in x.substance
													.slide
														.slidebox
															h4.slideTitle.text-xs-center #{t[1]}
															p.text-justify.p-a-1(id = t[0]) #{t[2]}
											.col-sm-6.animation.p-a-0.m-x-0
									when "argument"
											+argument(x.premises, x.conclusion)
									when "event"
										h4.text-xs-center.m-y-2 #{x.title}
										div(id = x.eventId).container
									when "readingEx"
										if x.size == "half"
											.row.m-y-3
												.col-lg-6.p-y-2.p-r-2
													+paragraphsEscaped(x.substance)
												.col-lg-6.readingEx(class = x.class id = x.eventId)
													+MC(x)
													.readingExQ.text-xs-center
													.readingExAns
										if x.size == "whole"
											.row(id = x.eventId class = x.class).m-y-3.wholeMC
												+MC(x)
												.readingExQ.text-xs-center.col-lg-6
												.readingExQ2.text-xs-center.col-lg-6
												.readingExAns.col-lg-12
									when "definition"
										- plugin = "dragMatch"
										if x.size == "half"
											.row.m-y-3
												.col-lg-6.p-y-2.p-r-2
													+paragraphsEscaped(x.substance)
												.col-lg-6.readingEx.dragMatch(id = x.eventId)
													+drag(x)
													.card.dropzone.text-xs-center
														p#dragQ
													.card.text-xs-center#flyzone
												.modal.fade.result(id = x.eventId+"modal")
													.modal-dialog.modal-dialog
														.modal-content
															.modal-header
																h4.modal-title Result
															.modal-body
															.modal-footer
																a.btn.btn-secondary(role ="button")#restart Restart
										if x.size == "whole"
											.row(id = x.eventId class = x.class).m-y-3.wholeMC
												+MC(x)
												.readingExQ.text-xs-center.col-lg-6
												.readingExQ2.text-xs-center.col-lg-6
												.readingExAns.col-lg-12


block extrafooter
	link(rel="stylesheet", type="text/css", href="/css/page.css")
	script(type="text/x-mathjax-config").
		MathJax.Hub.Config({
		tex2jax: {
			inlineMath: [ ['$','$'], ['\\(','\\)'] ]
		}}
		);
	script(type="text/javascript"  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML")
	script(src="https://d3js.org/d3.v4.min.js")
	script(src="https://d3js.org/d3-scale-chromatic.v1.min.js")
	script(src="/javascripts/mods/notify.js")
	script(src="/javascripts/mods/underscore-min.js")
	script(src="/javascripts/vennD.js")
	script(src="/javascripts/autohidenav.js")
	script(src="/javascripts/dragAndMatch.js")
	script(src="/javascripts/MC.js")
